# Generated by Django 5.2.6 on 2025-09-13 04:30

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('routes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ComplianceViolation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the compliance violation', primary_key=True, serialize=False)),
                ('violation_type', models.CharField(choices=[('cycle_limit', '70-Hour/8-Day Cycle Limit'), ('duty_period', '14-Hour Duty Period Limit'), ('driving_limit', '11-Hour Driving Limit'), ('rest_break', '30-Minute Rest Break Required'), ('off_duty', '10-Hour Off Duty Required'), ('sleeper_berth', 'Sleeper Berth Provision Violation'), ('record_keeping', 'Record Keeping Violation'), ('false_log', 'False Log Entry')], help_text='Type of HOS violation', max_length=20)),
                ('severity', models.CharField(choices=[('warning', 'Warning (Approaching Limit)'), ('violation', 'Violation (Limit Exceeded)'), ('critical', 'Critical (Safety Risk)'), ('imminent', 'Imminent Violation Risk')], default='warning', help_text='Severity level of the violation', max_length=10)),
                ('description', models.CharField(help_text='Description of the violation or risk', max_length=200)),
                ('current_value', models.DecimalField(decimal_places=1, help_text='Current value (e.g., hours driven)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('limit_value', models.DecimalField(decimal_places=1, help_text='Regulatory limit value', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('regulation_reference', models.CharField(blank=True, help_text="FMCSA regulation reference (e.g., '395.3(a)(2)')", max_length=50)),
                ('location_description', models.CharField(blank=True, help_text='Location where violation occurred or was detected', max_length=200)),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether the violation has been resolved')),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes on how the violation was resolved')),
                ('resolution_method', models.CharField(blank=True, choices=[('rest_break', 'Took Required Rest Break'), ('route_change', 'Changed Route'), ('schedule_change', 'Changed Schedule'), ('driver_change', 'Changed Driver'), ('cancelled_trip', 'Cancelled Trip'), ('log_correction', 'Corrected Log Entry'), ('other', 'Other Method')], help_text='Method used to resolve the violation', max_length=20)),
                ('impact', models.CharField(choices=[('low', 'Low Impact'), ('medium', 'Medium Impact'), ('high', 'High Impact'), ('safety_risk', 'Safety Risk')], default='medium', help_text='Impact level of the violation', max_length=20)),
                ('was_prevented', models.BooleanField(default=False, help_text='Whether this violation was prevented before occurring')),
                ('detected_at', models.DateTimeField(auto_now_add=True, help_text='When the violation was detected')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When the violation was resolved', null=True)),
                ('requires_follow_up', models.BooleanField(default=False, help_text='Whether this violation requires follow-up action')),
                ('follow_up_notes', models.TextField(blank=True, help_text='Notes on required follow-up actions')),
                ('trip', models.ForeignKey(help_text='The trip this violation relates to', on_delete=django.db.models.deletion.CASCADE, related_name='compliance_violations', to='routes.trip')),
            ],
            options={
                'verbose_name': 'Compliance Violation',
                'verbose_name_plural': 'Compliance Violations',
                'db_table': 'hos_compliance_violation',
                'ordering': ['-detected_at'],
                'indexes': [models.Index(fields=['trip', 'violation_type'], name='hos_complia_trip_id_dcfd2b_idx'), models.Index(fields=['severity'], name='hos_complia_severit_a7ff9d_idx'), models.Index(fields=['is_resolved'], name='hos_complia_is_reso_7731c2_idx'), models.Index(fields=['detected_at'], name='hos_complia_detecte_a2d96f_idx')],
            },
        ),
        migrations.CreateModel(
            name='HOSStatus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the HOS status', primary_key=True, serialize=False)),
                ('current_cycle_hours', models.DecimalField(decimal_places=1, help_text='Current hours used in 8-day cycle (max 70)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(70)])),
                ('available_cycle_hours', models.DecimalField(decimal_places=1, help_text='Available hours remaining in 8-day cycle', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(70)])),
                ('current_duty_period_hours', models.DecimalField(decimal_places=1, default=0, help_text='Hours on duty in current 14-hour window', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('available_duty_period_hours', models.DecimalField(decimal_places=1, default=14, help_text='Available hours remaining in 14-hour window', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('current_driving_hours', models.DecimalField(decimal_places=1, default=0, help_text='Hours driven in current duty period', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)])),
                ('available_driving_hours', models.DecimalField(decimal_places=1, default=11, help_text='Available driving hours remaining', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)])),
                ('last_duty_status_change', models.DateTimeField(blank=True, help_text='When duty status was last changed', null=True)),
                ('current_duty_status', models.CharField(choices=[('off_duty', 'Off Duty'), ('sleeper_berth', 'Sleeper Berth'), ('driving', 'Driving'), ('on_duty_not_driving', 'On Duty (Not Driving)')], default='off_duty', help_text='Current duty status of the driver', max_length=20)),
                ('hours_since_last_break', models.DecimalField(decimal_places=1, default=0, help_text='Hours driven since last 30-minute break', max_digits=3, validators=[django.core.validators.MinValueValidator(0)])),
                ('needs_30_minute_break', models.BooleanField(default=False, help_text='Whether driver needs 30-minute break (after 8 hours driving)')),
                ('can_drive', models.BooleanField(default=True, help_text='Whether driver is currently allowed to drive')),
                ('violation_reason', models.CharField(blank=True, help_text='Reason why driver cannot drive (if can_drive=False)', max_length=200)),
                ('next_required_rest_hours', models.DecimalField(decimal_places=1, default=10, help_text='Hours of rest required before next duty period', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(34)])),
                ('calculated_at', models.DateTimeField(auto_now=True, help_text='When this status was last calculated')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this HOS status was created')),
                ('trip', models.OneToOneField(help_text='The trip this HOS status belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='hos_status', to='routes.trip')),
            ],
            options={
                'verbose_name': 'HOS Status',
                'verbose_name_plural': 'HOS Statuses',
                'db_table': 'hos_compliance_status',
                'indexes': [models.Index(fields=['trip'], name='hos_complia_trip_id_0e655c_idx'), models.Index(fields=['can_drive'], name='hos_complia_can_dri_162c89_idx'), models.Index(fields=['calculated_at'], name='hos_complia_calcula_405284_idx')],
            },
        ),
        migrations.CreateModel(
            name='RestBreak',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the rest break', primary_key=True, serialize=False)),
                ('break_type', models.CharField(choices=[('30_minute', '30-Minute Rest Break'), ('10_hour', '10-Hour Off Duty'), ('sleeper_7_3', 'Sleeper Berth 7+3 Split'), ('sleeper_8_2', 'Sleeper Berth 8+2 Split'), ('fuel_stop', 'Fuel Stop'), ('pickup_dropoff', 'Pickup/Dropoff Time'), ('loading_unloading', 'Loading/Unloading'), ('inspection', 'Vehicle Inspection'), ('meal_break', 'Meal Break')], help_text='Type of rest break', max_length=20)),
                ('duration_hours', models.DecimalField(decimal_places=1, help_text='Break duration in hours', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.5')), django.core.validators.MaxValueValidator(Decimal('34'))])),
                ('required_at_driving_hours', models.DecimalField(decimal_places=1, help_text='Cumulative driving hours when this break is required', max_digits=4, validators=[django.core.validators.MinValueValidator(0)])),
                ('required_at_cycle_miles', models.DecimalField(blank=True, decimal_places=2, help_text='Trip miles when this break is required (for fuel stops)', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('location_description', models.CharField(help_text='Description of where break should be taken', max_length=200)),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this break is mandatory for HOS compliance')),
                ('regulation_reference', models.CharField(blank=True, help_text="FMCSA regulation reference (e.g., '395.3(a)(3)')", max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('critical', 'Critical (Required)')], default='medium', help_text='Priority level of this break', max_length=10)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('skipped', 'Skipped'), ('rescheduled', 'Rescheduled')], default='planned', help_text='Current status of the break', max_length=20)),
                ('scheduled_start_time', models.DateTimeField(blank=True, help_text='When this break is scheduled to start', null=True)),
                ('actual_start_time', models.DateTimeField(blank=True, help_text='When this break actually started', null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, help_text='When this break actually ended', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this break')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this break was planned')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this break was last updated')),
                ('trip', models.ForeignKey(help_text='The trip this rest break belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='rest_breaks', to='routes.trip')),
            ],
            options={
                'verbose_name': 'Rest Break',
                'verbose_name_plural': 'Rest Breaks',
                'db_table': 'hos_compliance_restbreak',
                'ordering': ['required_at_driving_hours'],
                'indexes': [models.Index(fields=['trip', 'required_at_driving_hours'], name='hos_complia_trip_id_14cf89_idx'), models.Index(fields=['break_type'], name='hos_complia_break_t_1c68d9_idx'), models.Index(fields=['status'], name='hos_complia_status_cc20f8_idx'), models.Index(fields=['is_mandatory'], name='hos_complia_is_mand_04f712_idx')],
            },
        ),
    ]
